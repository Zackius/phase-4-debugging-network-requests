// Generated by CoffeeScript 1.7.1
(function() {
  var db, refix, refixed;

  db = {};

  refix = require('../lib/refix');

  refixed = null;

  exports.setUp = function(callback) {
    db = {};
    refixed = refix(db);
    return callback();
  };

  exports.first = function(test) {
    var p;
    test.expect(2);
    p = refixed('foo');
    db.set = function(key, val, next) {
      test.equal(key, 'foobar');
      test.equal(val, 'baz');
      return next();
    };
    return p.set('bar', 'baz', function() {
      return test.done();
    });
  };

  exports.all = function(test) {
    var p;
    test.expect(2);
    p = refixed('foo');
    db.del = function(key1, key2, next) {
      test.equal(key1, 'foo1');
      test.equal(key2, 'foo2');
      return next();
    };
    return p.del('1', '2', function() {
      return test.done();
    });
  };

  exports.exceptFirst = function(test) {
    var p;
    test.expect(4);
    p = refixed('foo');
    db.bitop = function(operation, dest, src1, src2, next) {
      test.equal(operation, 'AND');
      test.equal(dest, 'foodest');
      test.equal(src1, 'foosrc1');
      test.equal(src2, 'foosrc2');
      return next();
    };
    return p.bitop('AND', 'dest', 'src1', 'src2', function() {
      return test.done();
    });
  };

  exports.exceptLast = function(test) {
    var p;
    test.expect(3);
    p = refixed('foo');
    db.blpop = function(key1, key2, timeout, next) {
      test.equal(key1, 'fookey1');
      test.equal(key2, 'fookey2');
      test.equal(timeout, 17);
      return next();
    };
    return p.blpop('key1', 'key2', 17, function() {
      return test.done();
    });
  };

  exports.everySecond = function(test) {
    var p;
    test.expect(4);
    p = refixed('foo');
    db.mset = function(key1, val1, key2, val2, next) {
      test.equal(key1, 'fookey1');
      test.equal(val1, 'val1');
      test.equal(key2, 'fookey2');
      test.equal(val2, 'val2');
      return next();
    };
    return p.mset('key1', 'val1', 'key2', 'val2', function() {
      return test.done();
    });
  };

  exports.migrate = function(test) {
    var p;
    test.expect(5);
    p = refixed('foo');
    db.migrate = function(host, port, key, dest, timeout, next) {
      test.equal(host, 'host');
      test.equal(port, 4711);
      test.equal(key, 'fookey');
      test.equal(dest, 'dest');
      test.equal(timeout, 17);
      return next();
    };
    return p.migrate('host', 4711, 'key', 'dest', 17, function() {
      return test.done();
    });
  };

  exports.dynamic = function(test) {
    var p;
    test.expect(6);
    p = refixed('foo');
    db.zinterstore = function(dest, numKeys, key1, key2, weights, w1, w2, next) {
      test.equal(dest, 'foodest');
      test.equal(key1, 'fookey1');
      test.equal(key2, 'fookey2');
      test.equal(weights, 'weights');
      test.equal(w1, 2);
      test.equal(w2, 3);
      return next();
    };
    return p.zinterstore('dest', 2, 'key1', 'key2', 'weights', 2, 3, function() {
      return test.done();
    });
  };

  exports["eval"] = function(test) {
    var p;
    test.expect(5);
    p = refixed('foo');
    db["eval"] = function(script, numKeys, key1, key2, arg1, arg2, next) {
      test.equal(script, 'script bar');
      test.equal(key1, 'fookey1');
      test.equal(key2, 'fookey2');
      test.equal(arg1, 'arg1');
      test.equal(arg2, 'arg2');
      return next();
    };
    return p["eval"]('script bar', 2, 'key1', 'key2', 'arg1', 'arg2', function() {
      return test.done();
    });
  };

  exports.sort = function(test) {
    var p;
    test.expect(3);
    p = refixed('foo');
    db.sort = function(key, _by, nosort, g1, p1, next) {
      test.equal(key, 'foolist');
      test.equal(g1, 'get');
      test.equal(p1, 'foo*');
      return next();
    };
    return p.sort('list', 'by', 'nosort', 'get', '*', function() {
      return test.done();
    });
  };

  exports.keys = function(test) {
    var p;
    test.expect(2);
    p = refixed('foo');
    db.keys = function(pattern, next) {
      test.equal(pattern, 'foo*');
      return next(null, ['foobar']);
    };
    return p.keys('*', function(err, result) {
      test.equal(result.shift(), 'bar');
      return test.done();
    });
  };

  exports.multi = function(test) {
    var m, p;
    test.expect(12);
    p = refixed('foo');
    db.multi = function() {
      return {
        get: function(key) {
          return test.equal(key, 'fook1');
        },
        set: function(key, val) {
          test.equal(key, 'fook2');
          return test.equal(val, 'v');
        },
        zunionstore: function(dest, numKeys, src1, src2) {
          test.equal(dest, 'foodest');
          test.equal(src1, 'foosrc1');
          return test.equal(src2, 'foosrc2');
        },
        exec: function(next) {
          return next();
        }
      };
    };
    m = p.multi();
    m.get('k1');
    m.set('k2', 'v');
    m.zunionstore('dest', 2, 'src1', 'src2');
    return m.exec(function() {
      return p.multi().get('k1').set('k2', 'v').zunionstore('dest', 2, 'src1', 'src2').exec(function() {
        return test.done();
      });
    });
  };

}).call(this);
